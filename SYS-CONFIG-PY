import subprocess
import platform

def get_installed_software():
    system = platform.system()

    if system == "Windows":
        command = 'wmic product get name'
    elif system == "Darwin":  # MacOS
        command = 'ls /Applications'
    elif system == "Linux":
        command = 'dpkg -l'  # Debian/Ubuntu. For other distributions, modify accordingly.
    else:
        print("Unsupported operating system")
        return

    try:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True, text=True)
        output, _ = process.communicate()

        if process.returncode == 0:
            return output.splitlines()
        else:
            print(f"Error executing command: {command}")
            return []
    except Exception as e:
        print(f"Error: {e}")
        return []

if __name__ == "__main__":
    installed_software = get_installed_software()

    if installed_software:
        print("Installed Software:")
        for software in installed_software:
            print(software)
    else:
        print("Unable to retrieve installed software.")

import speedtest

def check_speed():
    st = speedtest.Speedtest()
    
    download_speed = st.download()
    upload_speed = st.upload()

    return download_speed, upload_speed

if __name__ == "__main__":
    try:
        download_speed, upload_speed = check_speed()

        print(f"Download Speed: {download_speed / 1024 / 1024:.2f} Mbps")
        print(f"Upload Speed: {upload_speed / 1024 / 1024:.2f} Mbps")
    except Exception as e:
        print(f"Error: {e}")

import tkinter as tk

def get_screen_resolution():
    root = tk.Tk()
    width = root.winfo_screenwidth()
    height = root.winfo_screenheight()
    root.destroy()
    return width, height

if __name__ == "__main__":
    try:
        width, height = get_screen_resolution()
        print(f"Screen Resolution: {width}x{height}")
    except Exception as e:
        print(f"Error: {e}")
import platform
import os

def get_cpu_model():
    try:
        system = platform.system()

        if system == "Windows":
            return platform.processor()
        elif system == "Darwin":  # MacOS
            return os.popen("sysctl -n machdep.cpu.brand_string").read().strip()
        elif system == "Linux":
            return os.popen("cat /proc/cpuinfo | grep 'model name' | uniq | cut -d ':' -f2").read().strip()
        else:
            return "Unknown operating system"

    except Exception as e:
        print(f"Error: {e}")
        return None

if __name__ == "__main__":
    try:
        cpu_model = get_cpu_model()

        if cpu_model is not None:
            print(f"CPU Model: {cpu_model}")
    except Exception as e:
        print(f"Error: {e}")
import os
import multiprocessing

def get_cpu_info():
    try:
        num_cores = os.cpu_count()
        num_threads = multiprocessing.cpu_count()

        return num_cores, num_threads
    except Exception as e:
        print(f"Error: {e}")
        return None

if __name__ == "__main__":
    try:
        cpu_info = get_cpu_info()

        if cpu_info is not None:
            num_cores, num_threads = cpu_info
            print(f"Number of CPU Cores: {num_cores}")
            print(f"Number of CPU Threads: {num_threads}")
    except Exception as e:
        print(f"Error: {e}")
import GPUtil

def get_gpu_model():
    try:
        gpus = GPUtil.getGPUs()

        if gpus:
            return gpus[0].name  # Assuming only one GPU is present
        else:
            return "No GPU found"

    except Exception as e:
        print(f"Error: {e}")
        return None

if __name__ == "__main__":
    try:
        gpu_model = get_gpu_model()

        if gpu_model is not None:
            print(f"GPU Model: {gpu_model}")
    except Exception as e:
        print(f"Error: {e}")
import psutil

def get_ram_size():
    try:
        ram_info = psutil.virtual_memory()
        ram_size_gb = ram_info.total / (1024 ** 3)  # Convert bytes to gigabytes
        return ram_size_gb

    except Exception as e:
        print(f"Error: {e}")
        return None

if __name__ == "__main__":
    try:
        ram_size = get_ram_size()

        if ram_size is not None:
            print(f"RAM Size: {ram_size:.2f} GB")
    except Exception as e:
        print(f"Error: {e}")


import ctypes
from math import sqrt

def get_screen_size():
    try:
        # Get the DPI (dots per inch) of the primary monitor
        hdc = ctypes.windll.user32.GetDC(0)
        dpi = ctypes.windll.gdi32.GetDeviceCaps(hdc, 88)  # 88 corresponds to the DPI
        ctypes.windll.user32.ReleaseDC(0, hdc)

        # Get the width and height of the primary monitor
        user32 = ctypes.windll.user32
        width_px = user32.GetSystemMetrics(0)  # 0 corresponds to the width of the primary monitor
        height_px = user32.GetSystemMetrics(1)  # 1 corresponds to the height of the primary monitor

        # Calculate screen size in inches
        screen_size_inches = sqrt(width_px ** 2 + height_px ** 2) / dpi

        return screen_size_inches

    except Exception as e:
        print(f"Error: {e}")
        return None

if __name__ == "__main__":
    try:
        screen_size = get_screen_size()

        if screen_size is not None:
            print(f"Screen Size: {screen_size:.1f} inches")
    except Exception as e:
        print(f"Error: {e}")


import psutil

def get_mac_address():
    try:
        # Get all network interfaces
        interfaces = psutil.net_if_addrs()

        # Find the first non-empty MAC address
        for interface, addrs in interfaces.items():
            for addr in addrs:
                if addr.family == psutil.AF_LINK and addr.address is not None:
                    return addr.address

        return None

    except Exception as e:
        print(f"Error: {e}")
        return None

if __name__ == "__main__":
    try:
        mac_address = get_mac_address()

        if mac_address is not None:
            print(f"MAC Address: {mac_address}")
    except Exception as e:
        print(f"Error: {e}")


import requests

def get_public_ip():
    try:
        # Use httpbin to get public IP
        response = requests.get("https://httpbin.org/ip")
        if response.status_code == 200:
            public_ip = response.json()["origin"]
            return public_ip
        else:
            print(f"Failed to retrieve public IP. HTTP Status Code: {response.status_code}")
            return None

    except Exception as e:
        print(f"Error: {e}")
        return None

if __name__ == "__main__":
    try:
        public_ip = get_public_ip()

        if public_ip is not None:
            print(f"Public IP Address: {public_ip}")
    except Exception as e:
        print(f"Error: {e}")


import platform

def get_windows_version():
    try:
        system_info = platform.uname()

        if system_info.system == "Windows":
            return f"Windows {system_info.version}"

        return "Not a Windows system"

    except Exception as e:
        print(f"Error: {e}")
        return None

if __name__ == "__main__":
    try:
        windows_version = get_windows_version()

        if windows_version is not None:
            print(f"Windows Version: {windows_version}")
    except Exception as e:
        print(f"Error: {e}")
"""Internet speed Pip install speedtest-cli
Gpu model Pip install gputil
Ram Pip install psutil
Screen size Pip install screeninfo
Public ip adres Pip install requests"""
